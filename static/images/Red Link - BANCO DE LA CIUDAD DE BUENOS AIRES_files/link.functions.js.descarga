/** 
 * Funciones javascript globales. 
 * Se incluye en home.jsp.
 * @author fdiaz 
 */

function disableCopyPaste(event)
{
	var ctrlMod = (window.event) ? window.event.ctrlKey : event.ctrlKey;
	var shiftMod = (window.event) ? window.event.shiftKey : event.shiftKey;
	var keyCode = (window.event) ? window.event.keyCode : event.keyCode;
	var key = (window.event) ? window.event.keyCode : event.which;
	key = String.fromCharCode(key).toLowerCase();
	var result = ((ctrlMod && (key == 'c' || key == 'v' || keyCode == 45)) || (shiftMod && keyCode == 45) ) ? false : true;
	return result;
}

function disableRightClick(event)
{
	// TODO Ver compatibilidad con navegadores
	if (navigator.appName == "Netscape" && event.which == 3) {
		document.oncontextmenu = function() { return false; };
		return false;
	} 
	else if (navigator.appVersion.indexOf("MSIE") != -1 && event.button == 2) {
		document.oncontextmenu = function() { return false; };
		return false;
	}
	document.oncontextmenu = function() { return true; };
	return true;
}

// this fixes an issue with the old method, ambiguous values
// with this test document.cookie.indexOf( name + "=" );
function getCookie( check_name ) {
	// first we'll split this cookie up into name/value pairs
	// note: document.cookie only returns name=value, not the other components
	var a_all_cookies = document.cookie.split( ';' );
	var a_temp_cookie = '';
	var cookie_name = '';
	var cookie_value = '';
	var b_cookie_found = false; // set boolean t/f default f

	for ( i = 0; i < a_all_cookies.length; i++ )
	{
		// now we'll split apart each name=value pair
		a_temp_cookie = a_all_cookies[i].split( '=' );

		// and trim left/right whitespace while we're at it
		cookie_name = a_temp_cookie[0].replace(/^\s+|\s+$/g, '');

		// if the extracted name matches passed check_name
		if ( cookie_name == check_name )
		{
			b_cookie_found = true;
			// we need to handle case where cookie has no value but exists (no = sign, that is):
			if ( a_temp_cookie.length > 1 )
			{
				cookie_value = unescape( a_temp_cookie[1].replace(/^\s+|\s+$/g, '') );
			}
			// note that in cases where cookie is initialized but no value, null is returned
			return cookie_value;
			break;
		}
		a_temp_cookie = null;
		cookie_name = '';
	}
	if ( !b_cookie_found )
	{
		return null;
	}
}


/**
 * Corrige los errores en los selects que se dan en el firefox 40+ (no selecciona las opciones)
 * ejemplo, soluciona: HB-4561
 */
function fixSelect(select){
	var bi = browserInfo().split(" ");
	if(bi[0] === "Firefox" && bi[1] >= "40"){
		var selEl = $(select);
		selEl.find("option").mouseup(function(){selEl.val($(this).val());});
		selEl.find("option").mouseup(function(){selEl.change();});
		selEl.find("option").mouseup(function(){selEl.blur();});
		selEl.find("option").mouseup(function(){selEl.val($(this).val());});
	}
}

function fixAllSelects(selector){
	var findSelects = "div#transaccion";
	if(selector)
		findSelects = selector;
	$( findSelects + " select").each(function(_,e){fixSelect(e)});
}

/**
 * Devuelve el nombre y version del browser actual
 */
function browserInfo(){
    var ua= navigator.userAgent, tem, 
    M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if(/trident/i.test(M[1])){
        tem=  /\brv[ :]+(\d+)/g.exec(ua) || [];
        return 'IE '+(tem[1] || '');
    }
    if(M[1]=== 'Chrome'){
        tem= ua.match(/\bOPR\/(\d+)/);
        if(tem!= null) return 'Opera '+tem[1];
    }
    M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];
    if((tem= ua.match(/version\/(\d+)/i))!= null) M.splice(1, 1, tem[1]);
    return M.join(' ');
}

/**
 * Definición de la función trim() para IE8
 */
if(typeof String.prototype.trim !== 'function') {
	String.prototype.trim = function() {
		return this.replace(/^\s+|\s+$/g, ''); 
	}
}

if (!window.localStorage) {
	  Object.defineProperty(window, "localStorage", new (function () {
	    var aKeys = [], oStorage = {};
	    Object.defineProperty(oStorage, "getItem", {
	      value: function (sKey) { return sKey ? this[sKey] : null; },
	      writable: false,
	      configurable: false,
	      enumerable: false
	    });
	    Object.defineProperty(oStorage, "key", {
	      value: function (nKeyId) { return aKeys[nKeyId]; },
	      writable: false,
	      configurable: false,
	      enumerable: false
	    });
	    Object.defineProperty(oStorage, "setItem", {
	      value: function (sKey, sValue) {
	        if(!sKey) { return; }
	        document.cookie = escape(sKey) + "=" + escape(sValue) + "; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/";
	      },
	      writable: false,
	      configurable: false,
	      enumerable: false
	    });
	    Object.defineProperty(oStorage, "length", {
	      get: function () { return aKeys.length; },
	      configurable: false,
	      enumerable: false
	    });
	    Object.defineProperty(oStorage, "removeItem", {
	      value: function (sKey) {
	        if(!sKey) { return; }
	        document.cookie = escape(sKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/";
	      },
	      writable: false,
	      configurable: false,
	      enumerable: false
	    });
	    this.get = function () {
	      var iThisIndx;
	      for (var sKey in oStorage) {
	        iThisIndx = aKeys.indexOf(sKey);
	        if (iThisIndx === -1) { oStorage.setItem(sKey, oStorage[sKey]); }
	        else { aKeys.splice(iThisIndx, 1); }
	        delete oStorage[sKey];
	      }
	      for (aKeys; aKeys.length > 0; aKeys.splice(0, 1)) { oStorage.removeItem(aKeys[0]); }
	      for (var aCouple, iKey, nIdx = 0, aCouples = document.cookie.split(/\s*;\s*/); nIdx < aCouples.length; nIdx++) {
	        aCouple = aCouples[nIdx].split(/\s*=\s*/);
	        if (aCouple.length > 1) {
	          oStorage[iKey = unescape(aCouple[0])] = unescape(aCouple[1]);
	          aKeys.push(iKey);
	        }
	      }
	      return oStorage;
	    };
	    this.configurable = false;
	    this.enumerable = true;
	  })());
}
